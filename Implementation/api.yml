swagger: '2.0'
info:
  title: Discount Microservice API
  version: "0.1"
  description: Discount Microservice API for an E-Shop/Renting application
consumes:
  - application/json
produces:
  - application/json
basePath: "/api"
securityDefinitions:
  jwt:
    type: apiKey
    name: Authorization
    in: header
    x-authentication-scheme: bearer
    x-bearerInfoFunc: app.decode_token
security:
 - jwt: []
paths:
  /coupons/:
    get:
      tags: [ User Coupon ]
      operationId: app.getAllCoupons
      summary: Testing the get function for all coupons
      responses:
        200:
          description: Return all coupons

  /coupon/get/{coupon_id}:
    get:
      tags: [ User Coupon ]
      operationId: app.getCoupon
      summary: Testing finding a coupon by id
      parameters:
        - $ref: '#/parameters/coupon_id'
      responses:
        200:
          description: Return coupon with the id specified

  /coupon/get/{user_id}:
    get:
      tags: [ User Coupon ]
      operationId: app.getCouponForUser
      summary: Testing finding a coupon by user id
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return coupon with the user id specified

  /coupon/create/:
    post:
      security:
        - jwt: [ 'secret' ]
      tags: [ User Coupon ]
      operationId: app.addNewCoupon
      summary: Testing adding a coupon
      parameters:
        - $ref: '#/parameters/coupon_body'
      responses:
        200:
          description: Return status

  /coupon/update/{coupon_id}:
    put:
      tags: [ User Coupon ]
      operationId: app.updateCoupon
      summary: Testing an update to a coupon by id
      parameters:
        - $ref: '#/parameters/coupon_id'
        - $ref: '#/parameters/coupon_put'
      responses:
        200:
          description: Update and return coupon with the id specified

  /coupon/delete/{coupon_id}:
    delete:
      tags: [ User Coupon ]
      operationId: app.deleteCoupon
      summary: Testing deleting a coupon by id
      parameters:
        - $ref: '#/parameters/coupon_id'
      responses:
        200:
          description: Delete coupon with the id specified

  /coupon/calculate_discount/:
    post:
      tags: [ User Coupon ]
      operationId: app.discountCalculation
      summary: Testing of the discount calculation for a coupon
      parameters:
        - $ref: '#/parameters/coupon_body_discount'
      responses:
        200:
          description: Return status

  /discount/renting/{discount_id}:
    get:
      tags: [ Renting Discounts ]
      operationId: app.get_renting_discount
      summary: Find renting discount by id
      parameters:
        - $ref: '#/parameters/discount_id'
      responses:
        200:
          description: Returned renting discount with the specified id

  /discount/renting/:
    get:
      tags: [ Renting Discounts ]
      operationId: app.get_all_renting_discounts
      summary: Get all renting discounts
      responses:
        200:
          description: Return all renting discounts

  /discount/renting:
    post:
      tags: [ Renting Discounts ]
      operationId: app.renting_discount_add
      summary: Adding new renting discount
      parameters:
        - $ref: '#/parameters/discount_body'
      responses:
        200:
          description: Return status

  /discount/renting/user/{user_id}:
    get:
      tags: [ Renting Discounts ]
      operationId: app.get_renting_discount_for_user
      summary: Get discount renting by user
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return renting discount with the user id specified

  /discount/renting/delete/{discount_id}:
    delete:
      tags: [ Renting Discounts ]
      operationId: app.renting_discount_delete
      summary: Deleting renting discount
      parameters:
        - $ref: '#/parameters/discount_id'
      responses:
        200:
          description: Delete renting discount with the specified id

  /discount/renting/update/{discount_id}:
    put:
      tags: [ Renting Discounts ]
      operationId: app.renting_discount_update
      summary: Update renting discount with given id
      parameters:
        - $ref: '#/parameters/discount_id'
        - $ref: '#/parameters/discount_put'
      responses:
        200:
          description: Update and return renting discount with the specified id

  /discount/buying/{discount_id}:
    get:
      tags: [ Buying Discounts ]
      operationId: app.get_buying_discount
      summary: Find renting discount by id
      parameters:
        - $ref: '#/parameters/discount_id'
      responses:
        200:
          description: Returned discount with the specified id

  /discount/buying/:
    get:
      tags: [ Buying Discounts ]
      operationId: app.get_all_buying_discounts
      summary: Get all buying discounts
      responses:
        200:
          description: Return all buying discounts

  /discount/buying:
    post:
      tags: [ Buying Discounts ]
      operationId: app.buying_discount_add
      summary: Adding new buying discount
      parameters:
        - $ref: '#/parameters/discount_body'
      responses:
        200:
          description: Return status

  /discount/buying/user/{user_id}:
    get:
      tags: [ Buying Discounts ]
      operationId: app.get_buying_discount_for_user
      summary: Get buying discount by user
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return buying discount with the user id specified

  /discount/buying/delete/{discount_id}:
    delete:
      tags: [ Buying Discounts ]
      operationId: app.buying_discount_delete
      summary: Deleting buying discount
      parameters:
        - $ref: '#/parameters/discount_id'
      responses:
        200:
          description: Delete buying discount with the specified id

  /discount/buying/update/{discount_id}:
    put:
      tags: [ Buying Discounts ]
      operationId: app.buying_discount_update
      summary: Update buying discount with given id
      parameters:
        - $ref: '#/parameters/discount_id'
        - $ref: '#/parameters/discount_put'
      responses:
        200:
          description: Update and return buying discount with the specified id

  /discount/parking/{discount_id}:
    get:
      tags: [ Parking Discounts ]
      operationId: app.get_parking_discount
      summary: Find parking discount by id
      parameters:
        - $ref: '#/parameters/discount_id'
      responses:
        200:
          description: Returned discount with the specified id

  /discount/parking/:
    get:
      tags: [ Parking Discounts ]
      operationId: app.get_all_parking_discounts
      summary: Get all parking discounts
      responses:
        200:
          description: Return all parking discounts

  /discount/parking:
    post:
      tags: [ Parking Discounts ]
      operationId: app.parking_discount_add
      summary: Adding new parking discount
      parameters:
        - $ref: '#/parameters/discount_body'
      responses:
        200:
          description: Return status

  /discount/parking/user/{user_id}:
    get:
      tags: [ Parking Discounts ]
      operationId: app.get_parking_discount_for_user
      summary: Get parking discount by user
      parameters:
        - $ref: '#/parameters/user_id'
      responses:
        200:
          description: Return parking discount with the user id specified

  /discount/parking/delete/{discount_id}:
    delete:
      tags: [ Parking Discounts ]
      operationId: app.parking_discount_delete
      summary: Deleting parking discount
      parameters:
        - $ref: '#/parameters/discount_id'
      responses:
        200:
          description: Delete parking discount with the specified id

  /discount/parking/update/{discount_id}:
    put:
      tags: [ Parking Discounts ]
      operationId: app.parking_discount_update
      summary: Update parking discount with given id
      parameters:
        - $ref: '#/parameters/discount_id'
        - $ref: '#/parameters/discount_put'
      responses:
        200:
          description: Update and return parking discount with the specified id

  /applyDiscountOnProduct/:
    post:
      tags: [ Product Discount ]
      operationId: app.applyDiscountOnProduct
      summary: Apply discount on product
      parameters:
        - $ref: '#/parameters/product_body'
      responses:
        200:
          description: Successfully added discount on the product
        400:
          description: Bad request

  /product/update/{product_id}:
    put:
      tags: [ Product Discount ]
      operationId: app.testUpdateProduct
      summary: Update product
      parameters:
        - $ref: '#/parameters/product_id'
        - $ref: '#/parameters/product_body'
      responses:
        200:
          description: Update and return product
        400:
          description: Bad request

  /validProductDiscounts/:
    get:
      security:
        - jwt: [ 'secret' ]
      tags: [ Product Discount ]
      operationId: app.getAllValidProductDiscounts
      summary: Get all product discounts which are valid at the moment
      responses:
        200:
          description: All product discounts which are valid at the moment

  /allProductDiscounts/:
    get:
      tags: [ Product Discount ]
      operationId: app.getAllProductDiscounts
      summary: Get all product discounts
      responses:
        200:
          description: All product discounts

  /productDiscount/{product_id}:
    get:
      tags: [ Product Discount ]
      operationId: app.getProductDiscountById
      summary: Get product discount by id
      parameters:
        - $ref: '#/parameters/product_id'
      responses:
        200:
          description: Returned product discount by given id

  /deleteProduct/{product_id}:
    delete:
      tags: [ Product Discount ]
      operationId: app.deleteProduct
      summary: Delete product discount by id
      parameters:
        - $ref: '#/parameters/product_id'
      responses:
        200:
          description: Deleted product with given id

  /isProductOnDiscount/{product_id}:
    get:
      tags: [ Product Discount ]
      operationId: app.checkIfProductIsOnDiscountAtTheMoment
      summary: Check if the product with the given id is on discount at the moment
      parameters:
        - $ref: '#/parameters/product_id'
      responses:
        200:
          description: Check if product with given id is on discount at the moment

#  /postInformationFor5MostBoughtProducts:
#    post:
#      security:
#        - jwt: [ 'secret' ]
#      tags: [ Product Discount ]
#      operationId: app.postInformationFor5MostBoughtProducts
#      summary: Post information for 5 most bought products
#      parameters:
#        - $ref: '#/parameters/product_ids'
#      responses:
#        200:
#          description: Posted information for 5 most bought products

#  /postInformationFor5LeastBoughtProducts:
#    post:
#      security:
#        - jwt: [ 'secret' ] 
#      tags: [ Product Discount ]
#      operationId: app.postInformationFor5LeastBoughtProducts
#      summary: Post information for 5 least bought products
#      parameters:
#        - $ref: '#/parameters/product_ids'
#      responses:
#        200:
#          description: Posted information for 5 least bought products

  /postUserRank/{user_id}:
    post:
      security:
        - jwt: ['secret']
      tags: [ Post User Rank ]
      operationId: app.postUserRank
      summary: Post information for assigning medal to user
      parameters:
        - $ref: '#/parameters/user_id'
        - $ref: '#/parameters/user_rank'
      responses:
        200:
          description: Successfully assigned medal to user
        404:
          description: Bad request

  /applyDiscountForUserBuyingProduct/{user_id}:
    post:
      security:
        - jwt: [ 'secret' ]
      tags: [ Discount User Buying Product ]
      operationId: app.applyDiscountForUserBuyingProduct
      summary: Applies discount according to the user which buys the product
      parameters:
        - $ref: '#/parameters/user_id'
        - $ref: '#/parameters/price_to_pay'
      responses:
        200:
          description: Successfully added discount for the service
        400:
          description: Bad request

  /applyDiscountForUserRentingBike/{user_id}:
    post:
      security:
        - jwt: [ 'secret' ]
      tags: [ Discount User Renting ]
      operationId: app.applyDiscountForUserRentingBike
      summary: Applies discount according to the user which rents the bike
      parameters:
        - $ref: '#/parameters/user_id'
        - $ref: '#/parameters/price_to_pay'
      responses:
        200:
          description: Successfully added discount for the service
        400:
          description: Bad request

  /applyDiscountForUserPayingParking/{user_id}:
    post:
      security:
        - jwt: [ 'secret' ]
      tags: [ Discount User Parking ]
      operationId: app.applyDiscountForUserPayingParking
      summary: Applies discount to the user which pays parking
      parameters:
        - $ref: '#/parameters/user_id'
        - $ref: '#/parameters/price_to_pay'
      responses:
        200:
          description: Successfully added discount for the service
        400:
          description: Bad request

        
  

parameters:
  coupon_body:
    name: coupon_body
    description: Test for adding a coupon
    in: body
    schema:
      required:
        - id
        - type
        - userId
      properties:
        id:
          type: integer
        type:
          type: string
        userId:
          type: integer

  coupon_put:
    name: coupon_put
    description: Test for updating a coupon
    in: body
    schema:
      required:
        - Code
        - Amount
      properties:
        Code:
          type: string
        Amount:
          type: integer

  coupon_id:
    name: coupon_id
    description: The id of the coupon we are looking for
    in: path
    required: true
    type: integer

  discount_id:
    name: discount_id
    description: The id of the discount we are looking for
    in: path
    required: true
    type: integer

  discount_body:
    name: discount_body
    description: Adding a discount
    in: body
    schema:
      required:
        - discountRank_type
        - userId
      properties:
        discountRank_type:
          type: string
        userId:
          type: integer

  discount_put:
    name: discount_put
    description: Updating a discount
    in: body
    schema:
      required:
        - validFrom
        - validUntil
        - discountPercent
        - discountRank_type
        - code
      properties:
        validFrom:
          type: string
        validUntil:
          type: string
        discountPercent:
          type: number
        discountRank_type:
          type: string
        code:
          type: string

  user_id:
    name: user_id
    description: The id of the user we are looking for to find the coupon from
    in: path
    required: true
    type: integer

  coupon_body_discount:
    name: coupon_body_discount
    description: Test for calculating the discount for a coupon
    in: body
    schema:
      required:
        - UserId
        - InitialPrice
      properties:
        UserId:
          type: string
        InitialPrice:
          type: integer

  product_id:
    name: product_id
    description: The id of the product we are looking for
    in: path
    required: true
    type: integer

#  product_ids:
#    name: product_ids
#    description: The ids of products
#    in: body
#    required: true
#    schema:
#      type: array
#      items:
#        type: integer

  product_body:
    name: product_body
    description: Test for adding new product
    in: body
    schema:
      required:
        - Id
        - Type
      properties:
        Id:
          type: integer
        Type:
          type: string

  price_to_pay:
    name: price_to_pay
    description: The price to which the discount will be added
    in: body
    schema:
      required:
        - PriceToPay
      properties:
        PriceToPay:
          type: number
          format: double
  user_rank:
    name: user_rank
    description: Medal to be assigned to user
    in: body
    schema:
      required:
        - discountRank_type
      properties:
        discountRank_type:
          type: string
  auth_body_microservice:
    name: auth_body_microservice
    description: login and get token for microservices
    in: body
    schema:
      required:
        - apikey
      properties:
        apikey:
          type: string